package jec.ac.jp.incense;

import android.animation.ValueAnimator;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.Handler;
import android.os.Looper;
import android.os.Vibrator;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;
import android.widget.*;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

public class TimerActivity extends AppCompatActivity {
    private EditText etTime;
    private Button btnStart;
    private Button btnStop;
    private Spinner spinnerMusic;
    private TextView tvCountdown, breathingText, breathingGuideText;
    private ProgressBar progressBar;
    private View breathingCircle;
    private CountDownTimer countDownTimer;
    private boolean isCounting = false;
    private int selectedMusicResId = R.raw.music1;
    private long totalTimeInMillis;
    private MediaPlayer mediaPlayer;
    private Vibrator vibrator;
    private final Handler uiHandler = new Handler(Looper.getMainLooper());
    private final int inhaleTime = 4000;  // Âê∏Ê∞î 4 Áßí
    private final int exhaleTime = 4000;  // ÂëºÊ∞î 4 Áßí
    private final Handler breathingHandler = new Handler();
    private static final int FEEDBACK_REQUEST_CODE = 1;
    private Runnable breathingRunnable;
    private int initialCircleSize; // ËÆ∞ÂΩïÂúÜÂúàÁöÑÂàùÂßãÂ§ßÂ∞è

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_timer);
        // ÂêØÁî® Edge-to-Edge ÊòæÁ§∫ÊïàÊûú
        EdgeToEdge.enable(this);
        // **üîç ËØªÂèñ‰∏äÊ¨°ÂÜ•ÊÉ≥ÁöÑÊùÇÂøµÊÉÖÂÜµ**
        SharedPreferences sharedPreferences = getSharedPreferences("MeditationRecords", Context.MODE_PRIVATE);
        boolean lastMeditationDiscarded = sharedPreferences.getBoolean("lastMeditationDiscarded", false);
        String lastDistractionLevel = sharedPreferences.getString("lastDistractionLevel", ""); // **Ëé∑ÂèñÂ≠òÂÇ®ÁöÑÂÄº**
        // ‚úÖ Ê∑ªÂä†Êó•ÂøóÔºåÁ°Æ‰øùÊï∞ÊçÆÊ≠£Á°Æ
        Log.d("DEBUG", "üìå ËØªÂèñÊï∞ÊçÆ: ÈõëÂøµ: " + lastDistractionLevel + " | Â∫üÂºÉÁä∂ÊÄÅ: " + lastMeditationDiscarded);
        // ‚úÖ **Â¶ÇÊûú‰∏äÊ¨°ÂÜ•ÊÉ≥Ë¢´Â∫üÂºÉÔºå‰ºòÂÖàÂºπÂá∫Â∫üÂºÉÊèêÁ§∫**
        if (lastMeditationDiscarded) {
            showMeditationSuggestionDialog("‰∏äÂõû„ÅÆÁûëÊÉ≥Ë®òÈå≤„ÅØÁ†¥Ê£Ñ„Åï„Çå„Åæ„Åó„Åü„ÄÇÊ¨°Âõû„ÇÇÈ†ëÂºµ„Çä„Åæ„Åó„Çá„ÅÜÔºÅ");

            // ‚úÖ **Ê∏ÖÈô§Â∫üÂºÉÁä∂ÊÄÅÔºåÈò≤Ê≠¢ÊØèÊ¨°ÂêØÂä®ÈÉΩÂºπÁ™ó**
            SharedPreferences.Editor editor = sharedPreferences.edit();
            editor.putBoolean("lastMeditationDiscarded", false);
            editor.apply();
        }
// ‚úÖ **Â¶ÇÊûú‰∏äÊ¨°ÂÜ•ÊÉ≥Êú™Ë¢´Â∫üÂºÉÔºåÊ£ÄÊü•ÊùÇÂøµÊÉÖÂÜµ**
        else if (!lastDistractionLevel.isEmpty()) {
            if (lastDistractionLevel.equals("Â§ö„ÅÑ")) {
                showMeditationSuggestionDialog("ÂâçÂõû„ÅÆÁûëÊÉ≥„Åß„ÅØÈõëÂøµ„ÅåÂ§ö„Åã„Å£„Åü„Åß„Åô„Å≠„ÄÇ\n‰ªäÂõû„ÅØÁü≠„ÇÅ„ÅÆÁûëÊÉ≥„ÇíË©¶„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜÔºÅ");
            } else if (lastDistractionLevel.equals("„Å™„Åó") || lastDistractionLevel.equals("Â∞ë„Åó")) {
                showMeditationSuggestionDialog("ÂâçÂõû„ÅÆÁûëÊÉ≥„Åß„ÅØÈõëÂøµ„ÅåÂ∞ë„Å™„Åã„Å£„Åü„Åß„Åô„Å≠„ÄÇ\n‰ªäÂõû„ÅØ„ÇÇ„ÅÜÂ∞ë„ÅóÈï∑„ÇÅ„ÅÆÁûëÊÉ≥„Å´ÊåëÊà¶„Åó„Å¶„Åø„Åæ„Åõ„Çì„ÅãÔºü");
            }
        }
        if (!lastDistractionLevel.isEmpty()) {
            showMeditationSuggestionDialog(lastDistractionLevel); // **Ë∞ÉÁî®ÂºπÁ™ó**
        }
        etTime = findViewById(R.id.etTime);
        btnStart = findViewById(R.id.btnStart);
        btnStop = findViewById(R.id.btnStop);
        Button btnViewRecords = findViewById(R.id.btnViewRecords);
        spinnerMusic = findViewById(R.id.spinnerMusic);
        tvCountdown = findViewById(R.id.tvCountdown);
        breathingCircle = findViewById(R.id.breathingCircle);
        // ËÆ∞ÂΩïÂúÜÂúàÁöÑÂàùÂßãÂ§ßÂ∞è
        initialCircleSize = breathingCircle.getLayoutParams().width;
        breathingText = findViewById(R.id.breathingText);
        breathingGuideText = findViewById(R.id.breathingGuideText);
        progressBar = findViewById(R.id.progressBar);
        // **ÊÅ¢Â§çÈü≥‰πêÈÄâÊã©ÂäüËÉΩ**
        setupMusicSpinner();
        // **Ê£ÄÊü•‰∏äÊ¨°ÂÜ•ÊÉ≥Áä∂ÊÄÅ**
        checkLastMeditationStatus();
        btnStart.setOnClickListener(v -> startMeditationWithCountdown());
        btnStop.setOnClickListener(v -> stopCountdown());
        btnViewRecords.setOnClickListener(v -> startActivity(new Intent(TimerActivity.this, RecordActivity.class)));
    }

    private void setupMusicSpinner() {
        String[] musicOptions = {"Èõ®", "Relax", "Forest Lullaby"};

        final int[] musicResIds = {R.raw.music1, R.raw.relax, R.raw.forest_lullaby};

        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, musicOptions);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinnerMusic.setAdapter(adapter);
        spinnerMusic.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                selectedMusicResId = musicResIds[position];
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {
            }
        });
    }

    private void startMeditationWithCountdown() {
        new CountDownTimer(5000, 1000) {
            public void onTick(long millisUntilFinished) {
                btnStart.setText("ÈñãÂßã„Åæ„Åß " + millisUntilFinished / 1000 + " Áßí");
            }

            @Override
            public void onFinish() {
                btnStart.setText("ÂÜ•ÊÉ≥ÈñãÂßã");
                startCountdown();
            }
        }.start();
    }

    private void stopCountdown() {
        if (!isCounting) return;

        stopBreathingAnimation(); // ÂÅúÊ≠¢ÂëºÂê∏Âä®Áîª
        if (countDownTimer != null) {
            countDownTimer.cancel(); // ÂèñÊ∂àÂÄíËÆ°Êó∂
        }

        isCounting = false;
        stopMusicService(); // ÂÅúÊ≠¢Èü≥‰πê

        long elapsedTime = (totalTimeInMillis / 1000) - progressBar.getProgress();
        if (elapsedTime < 1) {
            Toast.makeText(this, "ÂÜ•ÊÉ≥ÊôÇÈñì„ÅåÁü≠„Åô„Åé„Åæ„Åô", Toast.LENGTH_SHORT).show();
            resetUI(); // Á°Æ‰øùË∞ÉÁî® resetUI()
            return;
        }

        resetUI();
        restoreScreenBrightness();
        openFeedbackScreen(elapsedTime);
    }

    private void startCountdown() {
        if (isCounting) return;

        String inputTime = etTime.getText().toString().trim();
        if (inputTime.isEmpty()) {
            Toast.makeText(this, "ÊôÇÈñì„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ", Toast.LENGTH_SHORT).show();
            return;
        }

        long inputMinutes = Long.parseLong(inputTime);
        if (inputMinutes <= 0) {
            Toast.makeText(this, "ÂÜ•ÊÉ≥ÊôÇÈñì„ÅØ1ÂàÜ‰ª•‰∏ä„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ", Toast.LENGTH_SHORT).show();
            return;
        }

        totalTimeInMillis = inputMinutes * 60 * 1000;
        isCounting = true;

        startMusicService();

        btnStop.setVisibility(View.VISIBLE);
        btnStart.setVisibility(View.GONE);
        etTime.setEnabled(false);
        progressBar.setMax((int) (totalTimeInMillis / 1000));
        progressBar.setProgress((int) (totalTimeInMillis / 1000));

        startBreathingAnimation();

        new CountDownTimer(10000, 1000) { // Âª∂Ëøü10Áßí
            @Override
            public void onTick(long millisUntilFinished) {
            }

            @Override
            public void onFinish() {
                dimScreen();
            }
        }.start();

        // ÂºÄÂßãÂÄíËÆ°Êó∂
        countDownTimer = new CountDownTimer(totalTimeInMillis, 1000) {
            @Override
            public void onTick(long millisUntilFinished) {
                progressBar.setProgress((int) (millisUntilFinished / 1000));
                tvCountdown.setText(formatTime(millisUntilFinished / 1000));
            }

            @Override
            public void onFinish() {
                if (isCounting) {
                    isCounting = false;
                    stopMusicService();
                    openFeedbackScreen(totalTimeInMillis / 1000);

                    restoreScreenBrightness();
                }
            }
        }.start();
    }


    private void dimScreen() {
        if (!isCounting) {
            Log.d("DEBUG", "ÂÜ•ÊÉ≥Êú™ÂºÄÂßãÔºåÂ±èÂπï‰∏ç‰ºöÂèòÊöó");
            return;
        }

        WindowManager.LayoutParams layoutParams = getWindow().getAttributes();
        layoutParams.screenBrightness = 0.1f; // ËÆæÁΩÆ‰∏∫ÊúÄÊöóÔºå0Ë°®Á§∫ÊúÄÊöóÔºå1Ë°®Á§∫ÊúÄ‰∫Æ
        getWindow().setAttributes(layoutParams);
        Log.d("DEBUG", "Â±èÂπïÂ∑≤ÂèòÊöó");
    }


    private void restoreScreenBrightness() {
        try {
            ContentResolver contentResolver = getContentResolver();
            int currentBrightness = Settings.System.getInt(contentResolver, Settings.System.SCREEN_BRIGHTNESS);

            WindowManager.LayoutParams layoutParams = getWindow().getAttributes();
            layoutParams.screenBrightness = currentBrightness / 255.0f;
            getWindow().setAttributes(layoutParams);

        } catch (Settings.SettingNotFoundException e) {
            e.printStackTrace();
        }
    }




    private void startMusicService() {
        Intent serviceIntent = new Intent(this, CountdownTimerService.class);
        serviceIntent.putExtra("MUSIC_RES_ID", selectedMusicResId);
        startService(serviceIntent);
    }


    private void stopMusicService() {
        Intent serviceIntent = new Intent(this, CountdownTimerService.class);
        stopService(serviceIntent);
    }


    private void startBreathingAnimation() {
        if (breathingCircle == null) {
            Toast.makeText(this, "„Ç®„É©„Éº: breathingCircle „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì", Toast.LENGTH_SHORT).show();
            return;
        }

        breathingCircle.getLayoutParams().width = initialCircleSize;
        breathingCircle.getLayoutParams().height = initialCircleSize;
        breathingCircle.requestLayout();

        final int expandedSize = (int) (initialCircleSize * 1.4); // ÊîæÂ§ßÂêéÁöÑÂ∞∫ÂØ∏

        breathingRunnable = new Runnable() {
            boolean isInhale = true;

            @Override
            public void run() {
                if (!isCounting) return;

                ValueAnimator animator = ValueAnimator.ofInt(
                        isInhale ? initialCircleSize : expandedSize,
                        isInhale ? expandedSize : initialCircleSize
                );
                animator.setDuration(isInhale ? inhaleTime : exhaleTime);
                animator.addUpdateListener(animation -> {
                    int animatedValue = (int) animation.getAnimatedValue();
                    breathingCircle.getLayoutParams().width = animatedValue;
                    breathingCircle.getLayoutParams().height = animatedValue;
                    breathingCircle.requestLayout();
                });
                animator.start();

                breathingText.setText(isInhale ? "Âê∏„Å£„Å¶..." : "Âêê„ÅÑ„Å¶...");
                breathingGuideText.setText(isInhale ? "Ê∑±„ÅèÂê∏„Å£„Å¶..." : "„ÇÜ„Å£„Åè„ÇäÂêê„ÅÑ„Å¶...");

                isInhale = !isInhale;
                breathingHandler.postDelayed(this, isInhale ? inhaleTime : exhaleTime);
            }
        };
        breathingHandler.post(breathingRunnable);
    }
    private void stopBreathingAnimation() {
        if (breathingRunnable != null) {
            breathingHandler.removeCallbacks(breathingRunnable);
        }

        if (breathingCircle != null) {
            breathingCircle.getLayoutParams().width = initialCircleSize;
            breathingCircle.getLayoutParams().height = initialCircleSize;
            breathingCircle.requestLayout(); // Á°Æ‰øùË∞ÉÁî® requestLayout()
            breathingCircle.invalidate();   // ÂèØÈÄâÔºöÂº∫Âà∂ÈáçÁªò
        }

        breathingCircle.setVisibility(View.VISIBLE);
        breathingText.setVisibility(View.VISIBLE);
        breathingGuideText.setVisibility(View.VISIBLE);
    }

    private void openFeedbackScreen(long meditationDuration) {
        if (meditationDuration < 1) {
            Toast.makeText(this, "ÂÜ•ÊÉ≥ÊôÇÈñì„ÅåÁü≠„Åô„Åé„Åæ„Åô", Toast.LENGTH_SHORT).show();
            return;
        }

        Intent intent = new Intent(this, MeditationFeedbackActivity.class);
        intent.putExtra("meditationDuration", meditationDuration);
        startActivityForResult(intent, FEEDBACK_REQUEST_CODE);
    }

    private void resetUI() {
        if (countDownTimer != null) {
            countDownTimer.cancel();
            countDownTimer = null;
        }

        if (breathingHandler != null && breathingRunnable != null) {
            breathingHandler.removeCallbacks(breathingRunnable);
        }

        stopGuidedMeditation();

        tvCountdown.setText("00:00");
        progressBar.setProgress(0);
        btnStart.setVisibility(View.VISIBLE);
        btnStop.setVisibility(View.GONE);
        etTime.setEnabled(true);
        etTime.setText("");

        // ÊÅ¢Â§çÂúÜÂúàÂ§ßÂ∞èÂà∞ÂàùÂßãÂ§ßÂ∞è
        if (breathingCircle != null) {
            breathingCircle.getLayoutParams().width = initialCircleSize;
            breathingCircle.getLayoutParams().height = initialCircleSize;
            breathingCircle.requestLayout();
            breathingCircle.invalidate();
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        resetUI();
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == FEEDBACK_REQUEST_CODE && resultCode == RESULT_OK && data != null) {
            long meditationDuration = data.getLongExtra("meditationDuration", 0);
            String usedIncense = data.getStringExtra("usedIncense");

            if (meditationDuration > 0) {
                saveMeditationRecord(meditationDuration, usedIncense);
            } else {
            }
        } else if (resultCode == RESULT_CANCELED && data != null && data.getBooleanExtra("meditationDiscarded", false)) {
            showMeditationSuggestionDialog("ÂÜ•ÊÉ≥Ë®òÈå≤„Åå‰øùÂ≠ò„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇÊ¨°Âõû„ÇÇÈ†ëÂºµ„Çä„Åæ„Åó„Çá„ÅÜÔºÅ");
        }

        resetUI();
    }


    private void saveMeditationRecord(long duration, String incense) {
        SharedPreferences sharedPreferences = getSharedPreferences("MeditationRecords", Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sharedPreferences.edit();

        String timestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.getDefault()).format(new Date());
        String record = "ÊôÇÈñì: " + (duration / 60) + "ÂàÜ " + (duration % 60) + "Áßí | ‰ΩøÁî®„Åó„ÅüÈ¶ô: " + (incense == null || incense.isEmpty() ? "Êú™ÂÖ•Âäõ" : incense);

        editor.putString(timestamp, record);
        editor.apply();
    }

    private void checkLastMeditationStatus() {
        SharedPreferences sharedPreferences = getSharedPreferences("MeditationRecords", Context.MODE_PRIVATE);
        boolean lastMeditationDiscarded = sharedPreferences.getBoolean("lastMeditationDiscarded", false);
        String lastDistractionLevel = sharedPreferences.getString("lastDistractionLevel", "");

        Log.d("DEBUG", "üìå checkLastMeditationStatus() -> ËØªÂèñÊï∞ÊçÆ: ÈõëÂøµ: " + lastDistractionLevel + " | Â∫üÂºÉÁä∂ÊÄÅ: " + lastMeditationDiscarded);

        if (lastMeditationDiscarded) {
            Log.d("DEBUG", "üìå ÂºπÂá∫Â∫üÂºÉÊèêÁ§∫ÂØπËØùÊ°ÜÔºÅ");
            showMeditationSuggestionDialog("‰∏äÂõû„ÅÆÁûëÊÉ≥Ë®òÈå≤„ÅØÁ†¥Ê£Ñ„Åï„Çå„Åæ„Åó„Åü„ÄÇÊ¨°Âõû„ÇÇÈ†ëÂºµ„Çä„Åæ„Åó„Çá„ÅÜÔºÅ");

            SharedPreferences.Editor editor = sharedPreferences.edit();
            editor.putBoolean("lastMeditationDiscarded", false);
            editor.apply();
        }
        else if (!lastDistractionLevel.isEmpty()) {
            if (lastDistractionLevel.equals("Â§ö„ÅÑ")) {
                showMeditationSuggestionDialog("ÂâçÂõû„ÅÆÁûëÊÉ≥„Åß„ÅØÈõëÂøµ„ÅåÂ§ö„Åã„Å£„Åü„Åß„Åô„Å≠„ÄÇ\n‰ªäÂõû„ÅØÁü≠„ÇÅ„ÅÆÁûëÊÉ≥„ÇíË©¶„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜÔºÅ");
            } else if (lastDistractionLevel.equals("„Å™„Åó") || lastDistractionLevel.equals("Â∞ë„Åó")) {
                showMeditationSuggestionDialog("ÂâçÂõû„ÅÆÁûëÊÉ≥„Åß„ÅØÈõëÂøµ„ÅåÂ∞ë„Å™„Åã„Å£„Åü„Åß„Åô„Å≠„ÄÇ\n‰ªäÂõû„ÅØ„ÇÇ„ÅÜÂ∞ë„ÅóÈï∑„ÇÅ„ÅÆÁûëÊÉ≥„Å´ÊåëÊà¶„Åó„Å¶„Åø„Åæ„Åõ„Çì„ÅãÔºü");
            }
        }
    }

    private void showMeditationSuggestionDialog(String lastDistractionLevel) {
        if (lastDistractionLevel == null || lastDistractionLevel.isEmpty()) {
            Log.d("DEBUG", "üìå showMeditationSuggestionDialog() -> lastDistractionLevel ‰∏∫Á©∫Ôºå‰∏çÂºπÁ™ó");
            return;
        }


        final String[] messageHolder = new String[1];

        if (lastDistractionLevel.equals("Â§ö„ÅÑ")) {
            messageHolder[0] = "ÂâçÂõû„ÅÆÂÜ•ÊÉ≥„Åß„ÅØÈõëÂøµ„ÅåÂ§ö„Åã„Å£„Åü„Åß„Åô„ÄÇ‰ªäÂõû„ÅØÁü≠„ÇÅ„ÅÆÂÜ•ÊÉ≥„ÇíË©¶„Åó„Å¶„Åø„Åæ„Åõ„Çì„ÅãÔºü";
        } else if (lastDistractionLevel.equals("Â∞ë„Åó") || lastDistractionLevel.equals("„Å™„Åó")) {
            messageHolder[0] = "ÂâçÂõû„ÅÆÂÜ•ÊÉ≥„Åß„ÅØÈõëÂøµ„ÅåÂ∞ë„Å™„Åã„Å£„Åü„Åß„Åô„ÄÇ‰ªäÂõû„ÅØ„ÇÇ„Å£„Å®Èï∑„ÇÅ„ÅÆÂÜ•ÊÉ≥„Å´ÊåëÊà¶„Åó„Å¶„Åø„Åæ„Åõ„Çì„ÅãÔºü";
        } else {
            return;
        }

        Log.d("DEBUG", "üìå ÊòæÁ§∫ÂºπÁ™ó: " + messageHolder[0]);

        runOnUiThread(() -> {
            new Handler(Looper.getMainLooper()).postDelayed(() -> {
                new AlertDialog.Builder(TimerActivity.this)
                        .setTitle("ÂÜ•ÊÉ≥„Éí„É≥„Éà")
                        .setMessage(messageHolder[0]) // ‚úÖ ËøôÈáå‰ΩøÁî® `final` Êï∞ÁªÑ
                        .setPositiveButton("OK", (dialog, which) -> dialog.dismiss())
                        .show();
            }, 500);
        });
    }

    private String formatTime(long seconds) {
        long min = seconds / 60;
        long sec = seconds % 60;
        return String.format("%02d:%02d", min, sec);
    }

    private void stopGuidedMeditation() {
        if (mediaPlayer != null) {
            mediaPlayer.stop();
            mediaPlayer.release();
            mediaPlayer = null;
        }
    }
}
